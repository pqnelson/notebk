# This file was *autogenerated* from the file fourier.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(Integer(3)); _sage_const_2 = Integer(Integer(2)); _sage_const_1 = Integer(Integer(1)); _sage_const_0 = Integer(Integer(0)); _sage_const_7 = Integer(Integer(7)); _sage_const_5 = Integer(Integer(5)); _sage_const_4 = Integer(Integer(4)); _sage_const_9 = Integer(Integer(9)); _sage_const_3p38052 = RealNumber('3.38052'); _sage_const_2p14091109369 = RealNumber('2.14091109369'); _sage_const_0p25 = RealNumber('0.25'); _sage_const_8p3 = RealNumber('8.3'); _sage_const_0p15 = RealNumber('0.15'); _sage_const_1p0 = RealNumber('1.0'); _sage_const_0p70211 = RealNumber('0.70211'); _sage_const_1p3 = RealNumber('1.3'); _sage_const_1p4 = RealNumber('1.4'); _sage_const_1p15486 = RealNumber('1.15486'); _sage_const_0p4 = RealNumber('0.4'); _sage_const_7p46367617 = RealNumber('7.46367617'); _sage_const_0p5 = RealNumber('0.5'); _sage_const_1p2 = RealNumber('1.2'); _sage_const_6p25 = RealNumber('6.25'); _sage_const_3p5 = RealNumber('3.5'); _sage_const_2p3 = RealNumber('2.3'); _sage_const_2p0 = RealNumber('2.0'); _sage_const_2p6 = RealNumber('2.6'); _sage_const_2p5 = RealNumber('2.5'); _sage_const_2p4 = RealNumber('2.4'); _sage_const_2p43065 = RealNumber('2.43065'); _sage_const_2p9 = RealNumber('2.9'); _sage_const_0p6 = RealNumber('0.6'); _sage_const_5p0 = RealNumber('5.0'); _sage_const_1p58 = RealNumber('1.58'); _sage_const_5p3 = RealNumber('5.3'); _sage_const_10 = Integer(Integer(10)); _sage_const_16 = Integer(Integer(16)); _sage_const_1p15 = RealNumber('1.15'); _sage_const_2p28445371 = RealNumber('2.28445371'); _sage_const_30 = Integer(Integer(30)); _sage_const_12p25 = RealNumber('12.25'); _sage_const_0p75 = RealNumber('0.75'); _sage_const_7p3 = RealNumber('7.3'); _sage_const_7p854 = RealNumber('7.854')######
# This function is for the triangle wave
#
def triangleWave():
    p = Graphics()
    l = Piecewise([[(-_sage_const_3 *pi,-_sage_const_2 *pi),lambda x:pi-abs(x+_sage_const_3 *pi)],[(-_sage_const_2 *pi,-pi),lambda x:abs(x+_sage_const_2 *pi)],[(-pi,_sage_const_0 ),lambda x:pi-abs(x+pi)],[(_sage_const_0 ,pi),lambda x:x],[(pi,_sage_const_2 *pi),lambda x:pi-abs(x-pi)],[(_sage_const_2 *pi,_sage_const_3 *pi),lambda x: x-_sage_const_2 *pi]])
    p = l.plot()
    p.save("2April2008triangleWave.eps")

######
# This is used for 9April2008's example ___
#
def stepFunction():
    p = Graphics()
    l = Piecewise([[(-pi,_sage_const_0 ),-_sage_const_1 ],[(_sage_const_0 ,pi),_sage_const_1 ]])
    p = l.plot()
    p.save("9April2008stepFunction.eps")

######
# This function is for the partial sum of the triangle waves
# that we use in
#
def partialSumsForTriangleWave():
    p = Graphics()
    l = Piecewise([[(-_sage_const_3 *pi,-_sage_const_2 *pi),lambda x:pi-abs(x+_sage_const_3 *pi)],[(-_sage_const_2 *pi,-pi),lambda x:abs(x+_sage_const_2 *pi)],[(-pi,_sage_const_0 ),lambda x:pi-abs(x+pi)],[(_sage_const_0 ,pi),lambda x:x],[(pi,_sage_const_2 *pi),lambda x:pi-abs(x-pi)],[(_sage_const_2 *pi,_sage_const_3 *pi),lambda x: x-_sage_const_2 *pi]])
    p += l.plot()
    for n in range (_sage_const_1 ,_sage_const_5 ):
    	f = lambda x: (pi/_sage_const_2 ) - (_sage_const_4 /pi)*sum([cos((_sage_const_2 *k-_sage_const_1 )*x)/((_sage_const_2 *k-_sage_const_1 )**_sage_const_2 ) for k in range(_sage_const_1 ,n)])
    	p += plot(f,-_sage_const_3 *pi,_sage_const_3 *pi,rgbcolor=hue(n/_sage_const_5 ))
    p.save("2April2008img2.eps")

######
# This plots the graph of the eigenvalues of the Heat equation
#

def heatEqnEigenvalues():
    p = Graphics()
    L = _sage_const_1
    alpha = _sage_const_5
    f1 = lambda x: _sage_const_2 *alpha*x/(x*x-alpha*alpha)
    f2 = lambda x: tan(x*L)
    p += plot(f1,_sage_const_0 ,_sage_const_10 ,rgbcolor=hue(_sage_const_1 ))
    p += plot(tan,_sage_const_0 ,_sage_const_10 )
    # point no 1
    p += point((_sage_const_1p58 ,-_sage_const_0p70211 ),pointsize=_sage_const_30 ,rgbcolor='black')
    p += text("$\\nu_{1}$",(_sage_const_1p3 ,-_sage_const_1p0 ))
    # point no 2
    p += point((_sage_const_2p28445371 ,-_sage_const_1p15486 ), pointsize=_sage_const_30 , rgbcolor='black')
    p += text("$\\nu_{2}$",(_sage_const_2p28445371 ,-_sage_const_2p0 ))
    # point no 3
    p += point((_sage_const_5p0 ,-_sage_const_3p38052 ),pointsize=_sage_const_30 , rgbcolor='black')
    p += text("$\\alpha$",(_sage_const_5p3 ,-_sage_const_3p38052 ))
    # point no 4
    p += point((_sage_const_7p46367617 ,_sage_const_2p43065 ),pointsize=_sage_const_30 , rgbcolor='black')
    p += text("$\\nu_{3}$",(_sage_const_7p3 ,_sage_const_2p9 ))
    # point no 5
    p += point((_sage_const_7p854 ,_sage_const_2p14091109369 ),pointsize=_sage_const_30 , rgbcolor='black')
    p += text("$2.5\\pi$",(_sage_const_8p3 ,_sage_const_2p4 ))
    p.xmin(_sage_const_0 )
    p.xmax(_sage_const_10 )
    p.ymin(-_sage_const_7 )
    p.ymax(_sage_const_7 )
    p.save("2May2008img1.eps")

def convolutionXSquared():
    f = lambda x:x*x
    p = Graphics()
    p += plot(f,-_sage_const_5 ,_sage_const_5 )
    p += polygon([(-_sage_const_4 ,_sage_const_0 ),(-_sage_const_2 ,_sage_const_0 ),(-_sage_const_2 ,_sage_const_4 ),(-_sage_const_2p5 ,_sage_const_6p25 ),(-_sage_const_3 ,_sage_const_9 ),(-_sage_const_3p5 ,_sage_const_12p25 ),(-_sage_const_4 ,_sage_const_16 )],rgbcolor=(_sage_const_1 ,_sage_const_0p6 ,_sage_const_0p6 ))
    p.save("9May2008img1.eps")

def gaussianKernelPlot():
    f = lambda x: exp(-x*x)/sqrt(pi)
    p = plot(f,-_sage_const_5 ,_sage_const_5 )
    p.save("9May2008img2.eps")

def f19May2009img1():
    p = Graphics()
    p += line([(-_sage_const_1 ,_sage_const_1 ),(_sage_const_1 ,_sage_const_1 )],rgbcolor='red')
    p += line([(-_sage_const_2 ,_sage_const_2 ),(_sage_const_0 ,_sage_const_0 )])
    p += line([(_sage_const_0 ,_sage_const_0 ),(_sage_const_2 ,_sage_const_2 )])
    p += text("$f(x)$",(_sage_const_0p25 ,_sage_const_1p15 ),rgbcolor='red')
    p += text("$g(x)$",(_sage_const_0p75 ,_sage_const_0p5 ),rgbcolor='blue')
    p.save("img/19May2008img1.eps")

def f19May2009img2():
    p = Graphics()
    p += line([(-_sage_const_2 ,_sage_const_2 ),(_sage_const_0 ,_sage_const_0 )],rgbcolor='black')
    p += line([(_sage_const_0 ,_sage_const_0 ),(_sage_const_2 ,_sage_const_2 )],rgbcolor='black')
    p += point((_sage_const_2 ,_sage_const_0 ),rgbcolor='black')
    p += point((_sage_const_2p3 ,_sage_const_0 ),rgbcolor='black')
    p += point((_sage_const_1p3 ,_sage_const_0 ),rgbcolor='black')
    p += text("$x$",(_sage_const_2p3 ,-_sage_const_0p15 ),rgbcolor='black')
    p += text("$x-1$",(_sage_const_1p3 ,-_sage_const_0p15 ), rgbcolor='black')
    p += polygon([(_sage_const_1p3 ,_sage_const_0 ),(_sage_const_2 ,_sage_const_0 ),(_sage_const_2 ,_sage_const_2 ),(_sage_const_1p3 ,_sage_const_1p3 )],rgbcolor=(_sage_const_1 ,_sage_const_0p6 ,_sage_const_0p6 ),alpha=_sage_const_0p5 )
    p += line([(_sage_const_1p3 ,_sage_const_1 ),(_sage_const_5 ,_sage_const_1 )],rgbcolor='blue',linestyle=':',rgbcolor='blue')
    p += text("$f(x)$",(_sage_const_3 ,_sage_const_1p2 ),rgbcolor='blue')
    p.xmin(-_sage_const_2p6 )
    p.xmax(_sage_const_4 )
    p.save("img/19May2008img2.eps")

def f19May2009img3():
    p = Graphics()
    p += line([(-_sage_const_2 ,_sage_const_2 ),(_sage_const_0 ,_sage_const_0 )],rgbcolor='black')
    p += line([(_sage_const_0 ,_sage_const_0 ),(_sage_const_2 ,_sage_const_2 )],rgbcolor='black')
    p += point((_sage_const_2 ,_sage_const_0 ),rgbcolor='black')
    p += point((_sage_const_0p6 ,_sage_const_0 ),rgbcolor='black')
    p += point((-_sage_const_0p4 ,_sage_const_0 ),rgbcolor='black')
    p += text("$x$",(_sage_const_0p6 ,-_sage_const_0p15 ),rgbcolor='black')
    p += text("$x-1$",(-_sage_const_0p4 ,-_sage_const_0p15 ), rgbcolor='black')
    p += polygon([(-_sage_const_0p4 ,_sage_const_0 ),(-_sage_const_0p4 ,_sage_const_0p4 ),(_sage_const_0 ,_sage_const_0 )],rgbcolor=(_sage_const_1 ,_sage_const_0p6 ,_sage_const_0p6 ),alpha=_sage_const_0p5 )
    p += polygon([(_sage_const_0 ,_sage_const_0 ),(_sage_const_1p4 ,_sage_const_0 ),(_sage_const_1p4 ,_sage_const_1p4 )],rgbcolor=(_sage_const_1 ,_sage_const_0p6 ,_sage_const_0p6 ),alpha=_sage_const_0p5 )
    p += line([(-_sage_const_0p4 ,_sage_const_1 ),(_sage_const_1p4 ,_sage_const_1 )],rgbcolor='blue',linestyle=':',rgbcolor='blue')
    p += text("$f(x)$",(_sage_const_0p4 ,_sage_const_1p2 ),rgbcolor='blue')
    p.xmin(-_sage_const_2p6 )
    p.xmax(_sage_const_4 )
    p.save("img/19May2008img3.eps")

def convolutionExample():
    p = Graphics()
    p += plot(x*x+_sage_const_1 ,x,-_sage_const_1 ,_sage_const_1 )
    p += plot(_sage_const_2  - _sage_const_0p5 *(x-_sage_const_1 )**_sage_const_2 ,x,_sage_const_1 ,_sage_const_3 )
    p += plot(_sage_const_2  - _sage_const_0p5 *(abs(x)-_sage_const_1 )**_sage_const_2 ,x,-_sage_const_1 ,-_sage_const_3 )
    p += plot(_sage_const_2 *x,x,-_sage_const_1 ,_sage_const_1 ,rgbcolor='red')
    p += plot(_sage_const_1 -abs(x),x,_sage_const_1 ,_sage_const_3 ,rgbcolor='red')
    p += plot(abs(x)-_sage_const_1 ,x,-_sage_const_1 ,-_sage_const_3 ,rgbcolor='red')
    p += plot((_sage_const_2 *sin(x)/x)*(_sage_const_2 *cos(_sage_const_2 *x)/(x*x) + _sage_const_4 *sin(_sage_const_2 *x)/x - _sage_const_2 /(x*x)),x,-_sage_const_10 ,_sage_const_10 ,rgbcolor='green')
    p.save("convolution.eps")

def convolutionExampleFrequencySpace():
    p = Graphics()
    p += plot((_sage_const_2 *sin(x)/x)*(_sage_const_2 *cos(_sage_const_2 *x)/(x*x) + _sage_const_4 *sin(_sage_const_2 *x)/x - _sage_const_2 /(x*x)),x,-_sage_const_10 ,_sage_const_10 ,rgbcolor='green')
    p.save("convolutionFrequency.eps")

######
# This prints out all the plots fresh
#
def allPlots():
    partialSumsForTriangleWave()
    triangleWave()
    stepFunction()
    heatEqnEigenvalues()
    convolutionXSquared()
    gaussianKernelPlot()
    fourierTransformExOne()
    f19May2009img1()
    f19May2009img2()
    f19May2009img3()
#allPlots()
convolutionExample()
#convolutionExampleFrequencySpace()
