#summary A Repository of TeX and LaTeX Macros.

<wiki:toc max_depth="3" />

= Introduction =

There's a large number of macros that are useful for specific things, and I'd like to collect them all here for future reference.


= Code =

== Fix the Skip and Break Amounts ==

I have noticed for some reason the {{{\medbreak}}} (etc.) commands give odd spacing. To fix this I just redefined things using the plain.tex macros:

{{{
\makeatletter

\setlength\parindent{20pt}
\setlength\parskip{0pt plus 1pt}
\newskip\smallskipamount \smallskipamount=3pt plus 1pt minus 1pt
\newskip\medskipamount \medskipamount=6pt plus 2pt minus 2pt
\newskip\bigskipamount \bigskipamount=12pt plus 4pt minus 4pt
\def\smallskip{\vskip\smallskipamount}
\def\medskip{\vskip\medskipamount}
\def\bigskip{\vskip\bigskipamount}
\def\removelastskip{\ifdim\lastskip=\z@\else\vskip-\lastskip\fi}
\def\smallbreak{\par\ifdim\lastskip<\smallskipamount
  \removelastskip\penalty-50\smallskip\fi}
\def\medbreak{\par\ifdim\lastskip<\medskipamount
  \removelastskip\penalty-100\medskip\fi}
\def\bigbreak{\par\ifdim\lastskip<\bigskipamount
  \removelastskip\penalty-200\bigskip\fi}

\makeatother
}}}

If you don't make this change, you may end up with problems when doing e.g. the suggested exercises using the macros below.

== Dangerous Bend ==

This produces a simple dangerous bend environment. I prefer this to the alternatives out there, since this permits me to ramble on for paragraphs (as opposed to exactly 1 paragraph).

{{{
\font\manual=manfnt
\def\dbend{{\manual\char127}} % dangerous bend sign

% Danger, Will Robinson!
\newenvironment{danger}{\medbreak\noindent\begin{small}\hangindent=2pc\hangafter=-2%
  \clubpenalty=10000%
  \hbox to0pt{\hskip-\hangindent\dbend\hfill}\ignorespaces}%
  {\end{small}\par}

% Danger! Danger!
\newenvironment{ddanger}{\medbreak\noindent\begin{small}\hangindent=3pc\hangafter=-2%
  \clubpenalty=10000\parindent=0pt\parskip=0.5pc%
  \hbox to0pt{\hskip-\hangindent\dbend\kern2pt\dbend\hfill}\ignorespaces}%
  {\end{small}\par}
}}}

== Algorithms ==

I always loved how Knuth wrote Algorithms --- to me they read as mathematical proofs. At any rate, I wanted to use the same macros. Somehow I found {{{taocpmac.tex}}} online somewhere, which are Knuth's macros for TAOCP. The LaTeX version of the relevant macros are thus:

{{{
% These macros are borrowed from TAOCPMAC.tex
\newcommand{\slug}{\hbox{\kern1.5pt\vrule width2.5pt height6pt depth1.5pt\kern1.5pt}}
\def\xskip{\hskip 7pt plus 3pt minus 4pt}
\newdimen\algindent
\newif\ifitempar \itempartrue % normally true unless briefly set false
\def\algindentset#1{\setbox0\hbox{{\bf #1.\kern.25em}}\algindent=\wd0\relax}
\def\algbegin #1 #2{\algindentset{#21}\alg #1 #2} % when steps all have 1 digit
\def\aalgbegin #1 #2{\algindentset{#211}\alg #1 #2} % when 10 or more steps
\def\alg#1(#2). {\medbreak % Usage: \algbegin Algorithm A (algname). This...
  \noindent{\bf#1}({\it#2\/}).\xskip\ignorespaces}
\def\algstep#1.{\ifitempar\smallskip\noindent\else\itempartrue
  \hskip-\parindent\fi
  \hbox to\algindent{\bf\hfil #1.\kern.25em}%
  \hangindent=\algindent\hangafter=1\ignorespaces}
% end of borrowed macros

% For Example, with less than 10 steps:
% \algbegin X (Multiplication). blah blah blah blah...
% \algstep X1. [{\it Do stuff\/}] blah blah blah
% \algstep X2. Terminate the algorithm.\quad\slug
}}}

The {{{\slug}}} places the Tombstone to indicate the algorithm is finished. I also use it for the QED symbol.

I have not tried this, but it seems to me that a preferable way to deal with things is to do something that incorporates an automatic counter. That is to say, have something like
{{{
\newcounter{algorithm}
\def\algorithm#1(#2). {% 
  \gdef\algprefix{#1}
  \setcounter{algorithm}{0}
  \def\step{ %
    \refstepcounter{algorithm} %
    \algstep{\algprefix{}\thealgorithm}. %
    }
  \alg#1(#2).
  }
}}}
This way, in theory (*I HAVE NOT TESTED THIS CODE!*) one could simply write
{{{
\algorithm X (Multiplication). We do multiplication the old fashioned way.
\step [{\it Do stuff\/}] Blah blah blah.
\step [{\it Clean up\/}] Terminate the algorithm.\quad\slug
}}}
It would also be nice if we could turn it into an environment somehow...

== Lecture Notes ==

I often type up lecture notes, so I have macros that replace the {{{\section{...}}}} macro. 

{{{
\newcommand{\lecture}[1][]{\refstepcounter{section}\bigbreak\renewcommand{\leftmark}{Lecture \thesection}
\noindent{\addcontentsline{toc}{section}{Lecture \thesection#1}\sectionfont Lecture \thesection#1}\medbreak}
}}}

Instead of the section {{{\section{Foobar}}}} being typewritten as "3. Foobar", we have {{{\lecture{Foobar}}}} be typeset as "Lecture 3 Foobar". Of course, one is free to improve upon this as one likes...

== Exercises ==

Sometimes it is useful to have exercises to make the reader learn the subject far better. I am admittedly fond of Knuth's approach trying to indicate the difficulty of the exercise, so I have tried to adopt it.

{{{
\def\textindent#1{\indent \llap {#1\enspace }\ignorespaces}
\newcounter{exercise}
\def\exercise [#1]{\refstepcounter{exercise}\ifnum\value{exercise}>1 \smallbreak\fi
  \textindent{\textbf{\theexercise.}}[\textit{#1\/}]\kern6pt}
\def\suggestedExercise [#1]{\refstepcounter{exercise}\ifnum\value{exercise}>1 \smallbreak\fi
  \textindent{\llap{\manual x\hskip3pt}\bf{\hbox to
     \ifnum \value{exercise}>99 1.5em\else 1em\fi{\hfil\theexercise}}.}[\textit{#1\/}]\kern6pt}

\def\HM{H\kern-.1em M} % used for "higher math" exercise ratings
\def\MN{M\kern-.1em N} % used in Section 4.3.1 when $MN$ appears frequently

\newenvironment{exercises}{\medskip\noindent\ignorespaces\textbf{EXERCISES}%
	\vspace{-0.35pc}\parindent=0pt%
	\setcounter{exercise}{0}}{}
}}}

The suggested exercises have a triangle in the margins, to differentiate them from the usual exercises.

One can alternatively change the first line of the {{{exercises}}} environment to make it a subsection:

{{{
\newenvironment{exercises}{\subsection*{Exercises}%
        \vspace{-0.35pc}\parindent=0pt%
	\setcounter{exercise}{0}}{}
}}}

Whichever one prefers. The next set of macros to consider is one which allows me to write the answers to a file, but this will be tricky (and presumably memory intensive) so I will delay that for the time being.

How one would use this, for example, would be:

{{{
\begin{exercises}
\exercise [05] What is the meaning of life?
% \answer{The answer is naturally 42.}
\exercise [50\HM] Solve the Riemann conjecture.
\suggestedExercise [45\HM] Prove Fermat's last Theorem.
\end{exercises}
}}}

== Answers ==

The only way to make LaTeX write verbatim to a file was to use the {{{verbatim}}} package. And to make {{{answer}}} into an environment.

{{{
\usepackage{verbatim}
\newwrite\ans%
\immediate\openout\ans=tex/answers % file for answers to exercises

\makeatletter
\newenvironment{answer}%
 {\par\medbreak
    \immediate\write\ans{}%
    \immediate\write\ans{\string\ansno\theexercise:}%
  \@bsphack
  \let\do\@makeother\dospecials\catcode`\^^M\active
  \def\verbatim@processline{%
    \immediate\write\ans{\the\verbatim@line}}%
  \verbatim@start}%
 {\@esphack} 

%% Sometimes there's an alternate way to solve the problem
%% TODO: Make this include an optional argument specifying how it
%%       was done, so one can use the following code snippet
%% \begin{altAns}[Using Complex Analysis]
%% ...
%% \end{altAns}
\newenvironment{altAns}%
 {\par\medbreak
    \immediate\write\ans{}%
    \immediate\write\ans{\string\ansno\theexercise (Alternate):}%
  \@bsphack
  \let\do\@makeother\dospecials\catcode`\^^M\active
  \def\verbatim@processline{%
    \immediate\write\ans{\the\verbatim@line}}%
  \verbatim@start}%
 {\@esphack} 
\makeatother 
}}}

One should probably rewrite the {{{exercises}}} environment to include writing to the {{{tex/answers.tex}}} file various extra information (e.g. which section the answers correspond to, etc.).

== Changing Section Fonts ==

I think that the section, subsection, etc., fonts are rather ugly. I decided to change this to make them somewhat prettier.

{{{
\font\sectionfont=cmssbx10 %at 12pt
\font\subsectionfont=cmssbx10
\makeatletter
\def\specialsection{\@startsection{section}{1}%
  \z@{.7\baselineskip\@plus\baselineskip}{.125\baselineskip}%
  {\sectionfont}}
\def\section{\@startsection{section}{1}%
  \z@{.7\baselineskip\@plus\baselineskip}{.125\baselineskip}%
  {\sectionfont}}
\def\subsection{\@startsection{subsection}{2}%
  \z@{.7\baselineskip\@plus\baselineskip}{.125\baselineskip}%
  {\subsectionfont}}
\def\subsubsection{\@startsection{subsubsection}{3}%
  \z@{.7\baselineskip\@plus\baselineskip}{.125\baselineskip}%
  {\subsectionfont}}
\makeatother
}}}

== Chapter Macro ==

I decided to also redefine the Chapter macro to make it better. Of course, that's when I am working within the {{{book.cls}}}. In other document classes, it causes errors.

{{{
\font\chapterfont=cmssbx10 scaled\magstep3
\font\twelvess=cmss12
\makeatletter
\renewcommand\chapter{\clearpage%\if@openright\cleardoublepage\else\clearpage\fi
                    \thispagestyle{plain}%
                    \global\@topnum\z@
                    \@afterindentfalse
                    \secdef\@chapter\@schapter}
\def\@makechapterhead#1{%
  \vspace*{50\p@}%
  {\parindent \z@ \raggedright \normalfont
    \ifnum \c@secnumdepth >\m@ne
      \if@mainmatter
        \twelvess \@chapapp\space \thechapter
        \par\nobreak
        \vskip 20\p@
      \fi
    \fi
    \interlinepenalty\@M
    \chapterfont\hfill #1\par\nobreak
    \vskip 40\p@
  }}
\def\@makeschapterhead#1{%
  \vspace*{50\p@}%
  {\parindent \z@ \raggedright
    \normalfont
    \interlinepenalty\@M
    \chapterfont \hfill #1\par\nobreak
    \vskip 40\p@
  }}
\makeatother
}}}

This is, again, in the spirit of Knuth's TAOCP.

== Sketch of Proof ==

I like to sometimes provide a __sketch__ of a proof instead of the full blown proof, as it's more instructive to give the idea instead of the mundane details (or if the proof is a good exercise, but the intuitive picture is needed at the moment). So I used {{{amsthm}}}'s proof environment as inspiration:

{{{
\renewcommand{\qedsymbol}{\slug}

\makeatletter
\providecommand{\sketchname}{Sketch of Proof}
\newenvironment{sketch}[1][\sketchname]{\par
  \pushQED{\qed}%
  \normalfont \topsep6\p@\@plus6\p@\relax
  \trivlist
  \item[\hskip\labelsep
        \itshape
    #1\@addpunct{.}]\ignorespaces
}{%
  \popQED\endtrivlist\@endpefalse
}
\makeatother
}}}

Remember the {{{\slug}}} is the code borrowed from Knuth, it's just a particular version of the Halmos tombstone.

== Bracket Macros ==

I forgot where I found these macros, but I claim *no credit* for them. They were released into the public domain, so licensing really isn't an issue. Here are the lovely macros:

{{{
\makeatletter
\def\overbracket{\@ifnextchar [ {\@overbracket} {\@overbracket
[\@bracketheight]}}
\def\@overbracket[#1]{\@ifnextchar [ {\@over@bracket[#1]}
{\@over@bracket[#1][0.3em]}}
\def\@over@bracket[#1][#2]#3{%\message {Overbracket: #1,#2,#3}
\mathop {\vbox {\m@th \ialign {##\crcr \noalign {\kern 3\p@
\nointerlineskip }\downbracketfill {#1}{#2}
                              \crcr \noalign {\kern 3\p@ }
                              \crcr  $\hfil \displaystyle {#3}\hfil $%
                              \crcr} }}\limits}
\def\downbracketfill#1#2{$\m@th \setbox \z@ \hbox {$\braceld$}
                  \edef\@bracketheight{\the\ht\z@}\downbracketend{#1}{#2}
                  \leaders \vrule \@height #1 \@depth \z@ \hfill
                  \leaders \vrule \@height #1 \@depth \z@ \hfill
\downbracketend{#1}{#2}$}
\def\downbracketend#1#2{\vrule depth #2 width #1\relax}


\def\underbracket{%
  \@ifnextchar[{\@underbracket}{\@underbracket [\@bracketheight]}%
}
\def\@underbracket[#1]{%
  \@ifnextchar[{\@under@bracket[#1]}{\@under@bracket[#1][0.4em]}%
}
\def\@under@bracket[#1][#2]#3{%\message {Underbracket: #1,#2,#3}
 \mathop{\vtop{\m@th \ialign {##\crcr $\hfil \displaystyle {#3}\hfil $%
 \crcr \noalign {\kern 3\p@ \nointerlineskip }\upbracketfill {#1}{#2}
       \crcr \noalign {\kern 3\p@ }}}}\limits}
\def\upbracketfill#1#2{$\m@th \setbox \z@ \hbox {$\braceld$}
                    \edef\@bracketheight{\the\ht\z@}\bracketend{#1}{#2}
                    \leaders \vrule \@height #1 \@depth \z@ \hfill
                    \leaders \vrule \@height #1 \@depth \z@ \hfill \bracketend
	              {#1}{#2}$}
\def\bracketend#1#2{\vrule height #2 width #1\relax}
\makeatother

\def\mathllap{\mathpalette\mathllapinternal}
\def\mathllapinternal#1#2{\llap{$\mathsurround=0pt#1{#2}$}}
\def\clap#1{\hbox to 0pt{\hss#1\hss}}
\def\mathclap{\mathpalette\mathclapinternal}
\def\mathclapinternal#1#2{\clap{$\mathsurround=0pt#1{#2}$}}
\def\mathrlap{\mathpalette\mathrlapinternal}
\def\mathrlapinternal#1#2{\rlap{$\mathsurround=0pt#1{#2}$}}
}}}

They function like the {{{\underbrace}}} and {{{\overbrace}}} macros, except they take in an optional argument for the width of the bracket. I prefer using {{{[0.5pt]}}} for my brackets.

== Mathematical Operators ==

I prefer defining macros that specify the notation for mathematical operators. That is to say, I prefer writing {{{$\aut{X}$}}} or something like that, then change one line of code to change the notation throughout the paper.

{{{
\newcommand{\re}{\mathop{\rm Re}\nolimits}
\newcommand{\im}{\mathop{\rm Im}\nolimits}
\newcommand{\tr}{\mathop{\rm Tr}\nolimits}
\newcommand{\aut}{\mathop{\rm Aut}\nolimits}
\renewcommand{\ker}{\mathop{\rm Ker}\nolimits}
\newcommand{\coker}{\mathop{\rm Coker}\nolimits}
\newcommand{\erfi}{\mathop{\rm erfi}\nolimits}
\newcommand{\erf}{\mathop{\rm erf}\nolimits}
\let\<\langle
\let\>\rangle
\let\iso\cong
\newcommand{\equalsdef}{\stackrel{\text{def}}{=}}
\newcommand{\eqdef}{\stackrel{\text{def}}{=}}
\newcommand{\define}[1] {``\/\textsc{\textbf{#1}}\/\/''}%\index{#1}}
\newcommand{\lie}{\mathop{\rm Lie}\nolimits}
\let\Lie\lie
\renewcommand{\arctan}{\mathop{\rm ArcTan}\nolimits}
\renewcommand{\hom}{\mathop{\rm Hom}\nolimits}
\let\Hom\hom
\def\noparskip{}
\newcommand{\id}[1]{\mathop{\rm id}\nolimits_{#1}}
\newcommand{\ob}[1]{\mathop{\rm Ob}\nolimits(#1)}
\newcommand{\cat}[1]{\mathop{\bf#1}\nolimits} % notation for a category, e.g. $\cat{Set}$
\newcommand{\nat}[1]{\mathop{\rm Nat}\nolimits(#1)} 
\newcommand{\sgn}{\mathop{\rm sgn}\nolimits}
\newcommand{\mat}{\mathop{\rm Mat}\nolimits}
\newcommand{\der}{\mathop{\rm Der}\nolimits}
\newcommand{\Ad}{\mathop{\rm Ad}\nolimits}
\newcommand{\ad}{\mathop{\rm ad}\nolimits}

\let\propersubset\subsetneq
\let\propersupset\supsetneq

%% Lie groups frequently used
\def\GL#1{{\rm GL}(#1)}
\def\SL#1{{\rm SL}(#1)}
\def\SO#1{{\rm SO}(#1)}
\def\O#1{{\rm O}(#1)}
\def\U#1{{\rm U}(#1)}
\def\SU#1{{\rm SU}(#1)}
\def\Sp#1{{\rm Sp}(#1)}

%% Differential Geometry refers to these quantities frequently as well
\def\diff{{\rm Diff}}
\def\vect{{\rm Vect}}

%% Categories frequently used
\def\Set{\cat{Set}} % category of sets
\def\FinSet{\cat{FinSet}} % category of finite sets
\def\Cat{\cat{Cat}} % category of categories
\def\Vect{\cat{Vect}} % category of vector spaces
\def\Top{\cat{Top}} % category of topological spaces
\def\Grp{\cat{Grp}} % category of groups
\def\Gpd{\cat{Gpd}} % category of groupoids
\def\Alg{\cat{Alg}} % category of algebras over a field

\def\weak={\approx} % weak equality when working in classical gauge theory
}}}